import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class TreeProblem {

	TreeNode rootNode;
	
	class TreeNode{
		int data;
		TreeNode left;
		TreeNode right;
		
		public TreeNode(int i) {
			// TODO Auto-generated constructor stub
			data = i;
			left = null;
			right = null;
		}
	};
	
	public static void main(String[] args) {
		
		Scanner s = new Scanner(System.in);
		int count = Integer.parseInt(s.next());
		
		s.nextLine();
		String elements = s.nextLine();
		String[] arr = elements.split(" ");
		int[] a = new int[count];
		for(int i = 0; i < arr.length; i++){
			a[i] = Integer.parseInt(arr[i]);
		}
		
		TreeProblem obj = new TreeProblem();
		obj.constructTree(a, count);
	}
	
	public ArrayList<Integer> findElement(int[] arr, int v){
		ArrayList<Integer> al = new ArrayList<>();
		for(int i = 0; i < arr.length; i++)
			if(arr[i] == v)
				al.add(i);
		return al;
	}
	
	public void constructTree(int[] arr, int count){
		
		TreeNode node1;
		TreeNode node2;
		
		ArrayList<Integer> al = findElement(arr, -1);
		this.rootNode = new TreeNode(al.get(0));
		
		Stack<TreeNode> s = new Stack<>();
		s.push(rootNode);
		while(!s.isEmpty()){
			TreeNode node = s.pop();
			al = findElement(arr, node.data);
			if(al.size() == 1)
			{
				node1 = new TreeNode(al.get(0));
				node.left = node1;
				s.push(node1);
			}
			if(al.size() == 2)
			{
				node1 = new TreeNode(al.get(0));
				node.left = node1;
				s.push(node1);
				
				node2 = new TreeNode(al.get(1));
				node.right = node2;
				s.push(node2);
			}
		}
		inOrder(rootNode);
		levelOrder(rootNode);
	}
	
	public void inOrder(TreeNode root){
		if(root != null){
			inOrder(root.left);
			System.out.print(root.data + " ");
			inOrder(root.right);
		}
	}
	
	public void levelOrder(TreeNode root ) {
		Queue<TreeNode> q1 = new LinkedList<TreeNode>();
		Queue<TreeNode> q2 = new LinkedList<TreeNode>();
		q1.add(root);
		while(!q1.isEmpty()){
			
			TreeNode n = q1.poll();
			if(n.left != null)
				q2.add(n.left);
			if(n.right != null)
				q2.add(n.right);
			
			while(!q2.isEmpty()){
				TreeNode nd = q2.poll();
				q1.add(nd);
				System.out.print(nd.data + " ");
			}
			System.out.println();
			q2 = new LinkedList<TreeNode>();
		}
		
	}
}


